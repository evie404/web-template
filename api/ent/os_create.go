// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rickypai/web-template/api/ent/manufacturer"
	"github.com/rickypai/web-template/api/ent/os"
)

// OSCreate is the builder for creating a OS entity.
type OSCreate struct {
	config
	mutation *OSMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (oc *OSCreate) SetName(s string) *OSCreate {
	oc.mutation.SetName(s)
	return oc
}

// SetCreatedAt sets the "created_at" field.
func (oc *OSCreate) SetCreatedAt(t time.Time) *OSCreate {
	oc.mutation.SetCreatedAt(t)
	return oc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oc *OSCreate) SetNillableCreatedAt(t *time.Time) *OSCreate {
	if t != nil {
		oc.SetCreatedAt(*t)
	}
	return oc
}

// SetModifiedAt sets the "modified_at" field.
func (oc *OSCreate) SetModifiedAt(t time.Time) *OSCreate {
	oc.mutation.SetModifiedAt(t)
	return oc
}

// SetNillableModifiedAt sets the "modified_at" field if the given value is not nil.
func (oc *OSCreate) SetNillableModifiedAt(t *time.Time) *OSCreate {
	if t != nil {
		oc.SetModifiedAt(*t)
	}
	return oc
}

// SetPhonesID sets the "phones" edge to the Manufacturer entity by ID.
func (oc *OSCreate) SetPhonesID(id int) *OSCreate {
	oc.mutation.SetPhonesID(id)
	return oc
}

// SetNillablePhonesID sets the "phones" edge to the Manufacturer entity by ID if the given value is not nil.
func (oc *OSCreate) SetNillablePhonesID(id *int) *OSCreate {
	if id != nil {
		oc = oc.SetPhonesID(*id)
	}
	return oc
}

// SetPhones sets the "phones" edge to the Manufacturer entity.
func (oc *OSCreate) SetPhones(m *Manufacturer) *OSCreate {
	return oc.SetPhonesID(m.ID)
}

// Mutation returns the OSMutation object of the builder.
func (oc *OSCreate) Mutation() *OSMutation {
	return oc.mutation
}

// Save creates the OS in the database.
func (oc *OSCreate) Save(ctx context.Context) (*OS, error) {
	var (
		err  error
		node *OS
	)
	oc.defaults()
	if len(oc.hooks) == 0 {
		if err = oc.check(); err != nil {
			return nil, err
		}
		node, err = oc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OSMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oc.check(); err != nil {
				return nil, err
			}
			oc.mutation = mutation
			node, err = oc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oc.hooks) - 1; i >= 0; i-- {
			mut = oc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OSCreate) SaveX(ctx context.Context) *OS {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (oc *OSCreate) defaults() {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		v := os.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
	if _, ok := oc.mutation.ModifiedAt(); !ok {
		v := os.DefaultModifiedAt()
		oc.mutation.SetModifiedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OSCreate) check() error {
	if _, ok := oc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := oc.mutation.Name(); ok {
		if err := os.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if _, ok := oc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := oc.mutation.ModifiedAt(); !ok {
		return &ValidationError{Name: "modified_at", err: errors.New("ent: missing required field \"modified_at\"")}
	}
	return nil
}

func (oc *OSCreate) sqlSave(ctx context.Context) (*OS, error) {
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (oc *OSCreate) createSpec() (*OS, *sqlgraph.CreateSpec) {
	var (
		_node = &OS{config: oc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: os.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: os.FieldID,
			},
		}
	)
	if value, ok := oc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: os.FieldName,
		})
		_node.Name = value
	}
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: os.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := oc.mutation.ModifiedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: os.FieldModifiedAt,
		})
		_node.ModifiedAt = value
	}
	if nodes := oc.mutation.PhonesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   os.PhonesTable,
			Columns: []string{os.PhonesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: manufacturer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.os_phones = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OSCreateBulk is the builder for creating many OS entities in bulk.
type OSCreateBulk struct {
	config
	builders []*OSCreate
}

// Save creates the OS entities in the database.
func (ocb *OSCreateBulk) Save(ctx context.Context) ([]*OS, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*OS, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OSMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OSCreateBulk) SaveX(ctx context.Context) []*OS {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
