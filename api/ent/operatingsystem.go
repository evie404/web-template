// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/rickypai/web-template/api/ent/manufacturer"
	"github.com/rickypai/web-template/api/ent/operatingsystem"
)

// OperatingSystem is the model entity for the OperatingSystem schema.
type OperatingSystem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// ModifiedAt holds the value of the "modified_at" field.
	ModifiedAt time.Time `json:"modified_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OperatingSystemQuery when eager-loading is set.
	Edges                   OperatingSystemEdges `json:"edges"`
	operating_system_phones *int
}

// OperatingSystemEdges holds the relations/edges for other nodes in the graph.
type OperatingSystemEdges struct {
	// Phones holds the value of the phones edge.
	Phones *Manufacturer `json:"phones,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PhonesOrErr returns the Phones value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OperatingSystemEdges) PhonesOrErr() (*Manufacturer, error) {
	if e.loadedTypes[0] {
		if e.Phones == nil {
			// The edge phones was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: manufacturer.Label}
		}
		return e.Phones, nil
	}
	return nil, &NotLoadedError{edge: "phones"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OperatingSystem) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case operatingsystem.FieldID:
			values[i] = &sql.NullInt64{}
		case operatingsystem.FieldName:
			values[i] = &sql.NullString{}
		case operatingsystem.FieldCreatedAt, operatingsystem.FieldModifiedAt:
			values[i] = &sql.NullTime{}
		case operatingsystem.ForeignKeys[0]: // operating_system_phones
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type OperatingSystem", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OperatingSystem fields.
func (os *OperatingSystem) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case operatingsystem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			os.ID = int(value.Int64)
		case operatingsystem.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				os.Name = value.String
			}
		case operatingsystem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				os.CreatedAt = value.Time
			}
		case operatingsystem.FieldModifiedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field modified_at", values[i])
			} else if value.Valid {
				os.ModifiedAt = value.Time
			}
		case operatingsystem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field operating_system_phones", value)
			} else if value.Valid {
				os.operating_system_phones = new(int)
				*os.operating_system_phones = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryPhones queries the "phones" edge of the OperatingSystem entity.
func (os *OperatingSystem) QueryPhones() *ManufacturerQuery {
	return (&OperatingSystemClient{config: os.config}).QueryPhones(os)
}

// Update returns a builder for updating this OperatingSystem.
// Note that you need to call OperatingSystem.Unwrap() before calling this method if this OperatingSystem
// was returned from a transaction, and the transaction was committed or rolled back.
func (os *OperatingSystem) Update() *OperatingSystemUpdateOne {
	return (&OperatingSystemClient{config: os.config}).UpdateOne(os)
}

// Unwrap unwraps the OperatingSystem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (os *OperatingSystem) Unwrap() *OperatingSystem {
	tx, ok := os.config.driver.(*txDriver)
	if !ok {
		panic("ent: OperatingSystem is not a transactional entity")
	}
	os.config.driver = tx.drv
	return os
}

// String implements the fmt.Stringer.
func (os *OperatingSystem) String() string {
	var builder strings.Builder
	builder.WriteString("OperatingSystem(")
	builder.WriteString(fmt.Sprintf("id=%v", os.ID))
	builder.WriteString(", name=")
	builder.WriteString(os.Name)
	builder.WriteString(", created_at=")
	builder.WriteString(os.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", modified_at=")
	builder.WriteString(os.ModifiedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OperatingSystems is a parsable slice of OperatingSystem.
type OperatingSystems []*OperatingSystem

func (os OperatingSystems) config(cfg config) {
	for _i := range os {
		os[_i].config = cfg
	}
}
