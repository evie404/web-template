// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rickypai/web-template/api/ent/operatingsystem"
	"github.com/rickypai/web-template/api/ent/phone"
	"github.com/rickypai/web-template/api/ent/predicate"
)

// OperatingSystemUpdate is the builder for updating OperatingSystem entities.
type OperatingSystemUpdate struct {
	config
	hooks    []Hook
	mutation *OperatingSystemMutation
}

// Where adds a new predicate for the OperatingSystemUpdate builder.
func (osu *OperatingSystemUpdate) Where(ps ...predicate.OperatingSystem) *OperatingSystemUpdate {
	osu.mutation.predicates = append(osu.mutation.predicates, ps...)
	return osu
}

// SetName sets the "name" field.
func (osu *OperatingSystemUpdate) SetName(s string) *OperatingSystemUpdate {
	osu.mutation.SetName(s)
	return osu
}

// SetModifiedAt sets the "modified_at" field.
func (osu *OperatingSystemUpdate) SetModifiedAt(t time.Time) *OperatingSystemUpdate {
	osu.mutation.SetModifiedAt(t)
	return osu
}

// SetNillableModifiedAt sets the "modified_at" field if the given value is not nil.
func (osu *OperatingSystemUpdate) SetNillableModifiedAt(t *time.Time) *OperatingSystemUpdate {
	if t != nil {
		osu.SetModifiedAt(*t)
	}
	return osu
}

// AddPhoneIDs adds the "phones" edge to the Phone entity by IDs.
func (osu *OperatingSystemUpdate) AddPhoneIDs(ids ...int) *OperatingSystemUpdate {
	osu.mutation.AddPhoneIDs(ids...)
	return osu
}

// AddPhones adds the "phones" edges to the Phone entity.
func (osu *OperatingSystemUpdate) AddPhones(p ...*Phone) *OperatingSystemUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return osu.AddPhoneIDs(ids...)
}

// Mutation returns the OperatingSystemMutation object of the builder.
func (osu *OperatingSystemUpdate) Mutation() *OperatingSystemMutation {
	return osu.mutation
}

// ClearPhones clears all "phones" edges to the Phone entity.
func (osu *OperatingSystemUpdate) ClearPhones() *OperatingSystemUpdate {
	osu.mutation.ClearPhones()
	return osu
}

// RemovePhoneIDs removes the "phones" edge to Phone entities by IDs.
func (osu *OperatingSystemUpdate) RemovePhoneIDs(ids ...int) *OperatingSystemUpdate {
	osu.mutation.RemovePhoneIDs(ids...)
	return osu
}

// RemovePhones removes "phones" edges to Phone entities.
func (osu *OperatingSystemUpdate) RemovePhones(p ...*Phone) *OperatingSystemUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return osu.RemovePhoneIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (osu *OperatingSystemUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(osu.hooks) == 0 {
		if err = osu.check(); err != nil {
			return 0, err
		}
		affected, err = osu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OperatingSystemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = osu.check(); err != nil {
				return 0, err
			}
			osu.mutation = mutation
			affected, err = osu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(osu.hooks) - 1; i >= 0; i-- {
			mut = osu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, osu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (osu *OperatingSystemUpdate) SaveX(ctx context.Context) int {
	affected, err := osu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (osu *OperatingSystemUpdate) Exec(ctx context.Context) error {
	_, err := osu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osu *OperatingSystemUpdate) ExecX(ctx context.Context) {
	if err := osu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osu *OperatingSystemUpdate) check() error {
	if v, ok := osu.mutation.Name(); ok {
		if err := operatingsystem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (osu *OperatingSystemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   operatingsystem.Table,
			Columns: operatingsystem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: operatingsystem.FieldID,
			},
		},
	}
	if ps := osu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := osu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: operatingsystem.FieldName,
		})
	}
	if value, ok := osu.mutation.ModifiedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: operatingsystem.FieldModifiedAt,
		})
	}
	if osu.mutation.PhonesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   operatingsystem.PhonesTable,
			Columns: []string{operatingsystem.PhonesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: phone.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osu.mutation.RemovedPhonesIDs(); len(nodes) > 0 && !osu.mutation.PhonesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   operatingsystem.PhonesTable,
			Columns: []string{operatingsystem.PhonesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: phone.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osu.mutation.PhonesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   operatingsystem.PhonesTable,
			Columns: []string{operatingsystem.PhonesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: phone.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, osu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operatingsystem.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// OperatingSystemUpdateOne is the builder for updating a single OperatingSystem entity.
type OperatingSystemUpdateOne struct {
	config
	hooks    []Hook
	mutation *OperatingSystemMutation
}

// SetName sets the "name" field.
func (osuo *OperatingSystemUpdateOne) SetName(s string) *OperatingSystemUpdateOne {
	osuo.mutation.SetName(s)
	return osuo
}

// SetModifiedAt sets the "modified_at" field.
func (osuo *OperatingSystemUpdateOne) SetModifiedAt(t time.Time) *OperatingSystemUpdateOne {
	osuo.mutation.SetModifiedAt(t)
	return osuo
}

// SetNillableModifiedAt sets the "modified_at" field if the given value is not nil.
func (osuo *OperatingSystemUpdateOne) SetNillableModifiedAt(t *time.Time) *OperatingSystemUpdateOne {
	if t != nil {
		osuo.SetModifiedAt(*t)
	}
	return osuo
}

// AddPhoneIDs adds the "phones" edge to the Phone entity by IDs.
func (osuo *OperatingSystemUpdateOne) AddPhoneIDs(ids ...int) *OperatingSystemUpdateOne {
	osuo.mutation.AddPhoneIDs(ids...)
	return osuo
}

// AddPhones adds the "phones" edges to the Phone entity.
func (osuo *OperatingSystemUpdateOne) AddPhones(p ...*Phone) *OperatingSystemUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return osuo.AddPhoneIDs(ids...)
}

// Mutation returns the OperatingSystemMutation object of the builder.
func (osuo *OperatingSystemUpdateOne) Mutation() *OperatingSystemMutation {
	return osuo.mutation
}

// ClearPhones clears all "phones" edges to the Phone entity.
func (osuo *OperatingSystemUpdateOne) ClearPhones() *OperatingSystemUpdateOne {
	osuo.mutation.ClearPhones()
	return osuo
}

// RemovePhoneIDs removes the "phones" edge to Phone entities by IDs.
func (osuo *OperatingSystemUpdateOne) RemovePhoneIDs(ids ...int) *OperatingSystemUpdateOne {
	osuo.mutation.RemovePhoneIDs(ids...)
	return osuo
}

// RemovePhones removes "phones" edges to Phone entities.
func (osuo *OperatingSystemUpdateOne) RemovePhones(p ...*Phone) *OperatingSystemUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return osuo.RemovePhoneIDs(ids...)
}

// Save executes the query and returns the updated OperatingSystem entity.
func (osuo *OperatingSystemUpdateOne) Save(ctx context.Context) (*OperatingSystem, error) {
	var (
		err  error
		node *OperatingSystem
	)
	if len(osuo.hooks) == 0 {
		if err = osuo.check(); err != nil {
			return nil, err
		}
		node, err = osuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OperatingSystemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = osuo.check(); err != nil {
				return nil, err
			}
			osuo.mutation = mutation
			node, err = osuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(osuo.hooks) - 1; i >= 0; i-- {
			mut = osuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, osuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (osuo *OperatingSystemUpdateOne) SaveX(ctx context.Context) *OperatingSystem {
	node, err := osuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (osuo *OperatingSystemUpdateOne) Exec(ctx context.Context) error {
	_, err := osuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osuo *OperatingSystemUpdateOne) ExecX(ctx context.Context) {
	if err := osuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osuo *OperatingSystemUpdateOne) check() error {
	if v, ok := osuo.mutation.Name(); ok {
		if err := operatingsystem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (osuo *OperatingSystemUpdateOne) sqlSave(ctx context.Context) (_node *OperatingSystem, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   operatingsystem.Table,
			Columns: operatingsystem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: operatingsystem.FieldID,
			},
		},
	}
	id, ok := osuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing OperatingSystem.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := osuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := osuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: operatingsystem.FieldName,
		})
	}
	if value, ok := osuo.mutation.ModifiedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: operatingsystem.FieldModifiedAt,
		})
	}
	if osuo.mutation.PhonesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   operatingsystem.PhonesTable,
			Columns: []string{operatingsystem.PhonesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: phone.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osuo.mutation.RemovedPhonesIDs(); len(nodes) > 0 && !osuo.mutation.PhonesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   operatingsystem.PhonesTable,
			Columns: []string{operatingsystem.PhonesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: phone.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osuo.mutation.PhonesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   operatingsystem.PhonesTable,
			Columns: []string{operatingsystem.PhonesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: phone.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OperatingSystem{config: osuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, osuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operatingsystem.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
