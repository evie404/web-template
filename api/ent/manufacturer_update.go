// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rickypai/web-template/api/ent/manufacturer"
	"github.com/rickypai/web-template/api/ent/predicate"
)

// ManufacturerUpdate is the builder for updating Manufacturer entities.
type ManufacturerUpdate struct {
	config
	hooks    []Hook
	mutation *ManufacturerMutation
}

// Where adds a new predicate for the ManufacturerUpdate builder.
func (mu *ManufacturerUpdate) Where(ps ...predicate.Manufacturer) *ManufacturerUpdate {
	mu.mutation.predicates = append(mu.mutation.predicates, ps...)
	return mu
}

// SetName sets the "name" field.
func (mu *ManufacturerUpdate) SetName(s string) *ManufacturerUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetModifiedAt sets the "modified_at" field.
func (mu *ManufacturerUpdate) SetModifiedAt(t time.Time) *ManufacturerUpdate {
	mu.mutation.SetModifiedAt(t)
	return mu
}

// SetNillableModifiedAt sets the "modified_at" field if the given value is not nil.
func (mu *ManufacturerUpdate) SetNillableModifiedAt(t *time.Time) *ManufacturerUpdate {
	if t != nil {
		mu.SetModifiedAt(*t)
	}
	return mu
}

// SetPhonesID sets the "phones" edge to the Manufacturer entity by ID.
func (mu *ManufacturerUpdate) SetPhonesID(id int) *ManufacturerUpdate {
	mu.mutation.SetPhonesID(id)
	return mu
}

// SetNillablePhonesID sets the "phones" edge to the Manufacturer entity by ID if the given value is not nil.
func (mu *ManufacturerUpdate) SetNillablePhonesID(id *int) *ManufacturerUpdate {
	if id != nil {
		mu = mu.SetPhonesID(*id)
	}
	return mu
}

// SetPhones sets the "phones" edge to the Manufacturer entity.
func (mu *ManufacturerUpdate) SetPhones(m *Manufacturer) *ManufacturerUpdate {
	return mu.SetPhonesID(m.ID)
}

// Mutation returns the ManufacturerMutation object of the builder.
func (mu *ManufacturerUpdate) Mutation() *ManufacturerMutation {
	return mu.mutation
}

// ClearPhones clears the "phones" edge to the Manufacturer entity.
func (mu *ManufacturerUpdate) ClearPhones() *ManufacturerUpdate {
	mu.mutation.ClearPhones()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *ManufacturerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mu.hooks) == 0 {
		if err = mu.check(); err != nil {
			return 0, err
		}
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ManufacturerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mu.check(); err != nil {
				return 0, err
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *ManufacturerUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *ManufacturerUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *ManufacturerUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *ManufacturerUpdate) check() error {
	if v, ok := mu.mutation.Name(); ok {
		if err := manufacturer.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (mu *ManufacturerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   manufacturer.Table,
			Columns: manufacturer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: manufacturer.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: manufacturer.FieldName,
		})
	}
	if value, ok := mu.mutation.ModifiedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: manufacturer.FieldModifiedAt,
		})
	}
	if mu.mutation.PhonesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   manufacturer.PhonesTable,
			Columns: []string{manufacturer.PhonesColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: manufacturer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.PhonesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   manufacturer.PhonesTable,
			Columns: []string{manufacturer.PhonesColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: manufacturer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{manufacturer.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ManufacturerUpdateOne is the builder for updating a single Manufacturer entity.
type ManufacturerUpdateOne struct {
	config
	hooks    []Hook
	mutation *ManufacturerMutation
}

// SetName sets the "name" field.
func (muo *ManufacturerUpdateOne) SetName(s string) *ManufacturerUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetModifiedAt sets the "modified_at" field.
func (muo *ManufacturerUpdateOne) SetModifiedAt(t time.Time) *ManufacturerUpdateOne {
	muo.mutation.SetModifiedAt(t)
	return muo
}

// SetNillableModifiedAt sets the "modified_at" field if the given value is not nil.
func (muo *ManufacturerUpdateOne) SetNillableModifiedAt(t *time.Time) *ManufacturerUpdateOne {
	if t != nil {
		muo.SetModifiedAt(*t)
	}
	return muo
}

// SetPhonesID sets the "phones" edge to the Manufacturer entity by ID.
func (muo *ManufacturerUpdateOne) SetPhonesID(id int) *ManufacturerUpdateOne {
	muo.mutation.SetPhonesID(id)
	return muo
}

// SetNillablePhonesID sets the "phones" edge to the Manufacturer entity by ID if the given value is not nil.
func (muo *ManufacturerUpdateOne) SetNillablePhonesID(id *int) *ManufacturerUpdateOne {
	if id != nil {
		muo = muo.SetPhonesID(*id)
	}
	return muo
}

// SetPhones sets the "phones" edge to the Manufacturer entity.
func (muo *ManufacturerUpdateOne) SetPhones(m *Manufacturer) *ManufacturerUpdateOne {
	return muo.SetPhonesID(m.ID)
}

// Mutation returns the ManufacturerMutation object of the builder.
func (muo *ManufacturerUpdateOne) Mutation() *ManufacturerMutation {
	return muo.mutation
}

// ClearPhones clears the "phones" edge to the Manufacturer entity.
func (muo *ManufacturerUpdateOne) ClearPhones() *ManufacturerUpdateOne {
	muo.mutation.ClearPhones()
	return muo
}

// Save executes the query and returns the updated Manufacturer entity.
func (muo *ManufacturerUpdateOne) Save(ctx context.Context) (*Manufacturer, error) {
	var (
		err  error
		node *Manufacturer
	)
	if len(muo.hooks) == 0 {
		if err = muo.check(); err != nil {
			return nil, err
		}
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ManufacturerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = muo.check(); err != nil {
				return nil, err
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *ManufacturerUpdateOne) SaveX(ctx context.Context) *Manufacturer {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *ManufacturerUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *ManufacturerUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *ManufacturerUpdateOne) check() error {
	if v, ok := muo.mutation.Name(); ok {
		if err := manufacturer.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (muo *ManufacturerUpdateOne) sqlSave(ctx context.Context) (_node *Manufacturer, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   manufacturer.Table,
			Columns: manufacturer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: manufacturer.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Manufacturer.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: manufacturer.FieldName,
		})
	}
	if value, ok := muo.mutation.ModifiedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: manufacturer.FieldModifiedAt,
		})
	}
	if muo.mutation.PhonesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   manufacturer.PhonesTable,
			Columns: []string{manufacturer.PhonesColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: manufacturer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.PhonesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   manufacturer.PhonesTable,
			Columns: []string{manufacturer.PhonesColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: manufacturer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Manufacturer{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{manufacturer.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
