// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/rickypai/web-template/api/ent/manufacturer"
	"github.com/rickypai/web-template/api/ent/operatingsystem"
	"github.com/rickypai/web-template/api/ent/phone"
	"github.com/rickypai/web-template/api/ent/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeManufacturer    = "Manufacturer"
	TypeOperatingSystem = "OperatingSystem"
	TypePhone           = "Phone"
)

// ManufacturerMutation represents an operation that mutates the Manufacturer nodes in the graph.
type ManufacturerMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	created_at    *time.Time
	modified_at   *time.Time
	clearedFields map[string]struct{}
	phones        *int
	clearedphones bool
	done          bool
	oldValue      func(context.Context) (*Manufacturer, error)
	predicates    []predicate.Manufacturer
}

var _ ent.Mutation = (*ManufacturerMutation)(nil)

// manufacturerOption allows management of the mutation configuration using functional options.
type manufacturerOption func(*ManufacturerMutation)

// newManufacturerMutation creates new mutation for the Manufacturer entity.
func newManufacturerMutation(c config, op Op, opts ...manufacturerOption) *ManufacturerMutation {
	m := &ManufacturerMutation{
		config:        c,
		op:            op,
		typ:           TypeManufacturer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withManufacturerID sets the ID field of the mutation.
func withManufacturerID(id int) manufacturerOption {
	return func(m *ManufacturerMutation) {
		var (
			err   error
			once  sync.Once
			value *Manufacturer
		)
		m.oldValue = func(ctx context.Context) (*Manufacturer, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Manufacturer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withManufacturer sets the old Manufacturer of the mutation.
func withManufacturer(node *Manufacturer) manufacturerOption {
	return func(m *ManufacturerMutation) {
		m.oldValue = func(context.Context) (*Manufacturer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ManufacturerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ManufacturerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ManufacturerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *ManufacturerMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ManufacturerMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Manufacturer entity.
// If the Manufacturer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ManufacturerMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ManufacturerMutation) ResetName() {
	m.name = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ManufacturerMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ManufacturerMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Manufacturer entity.
// If the Manufacturer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ManufacturerMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ManufacturerMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetModifiedAt sets the "modified_at" field.
func (m *ManufacturerMutation) SetModifiedAt(t time.Time) {
	m.modified_at = &t
}

// ModifiedAt returns the value of the "modified_at" field in the mutation.
func (m *ManufacturerMutation) ModifiedAt() (r time.Time, exists bool) {
	v := m.modified_at
	if v == nil {
		return
	}
	return *v, true
}

// OldModifiedAt returns the old "modified_at" field's value of the Manufacturer entity.
// If the Manufacturer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ManufacturerMutation) OldModifiedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldModifiedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldModifiedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModifiedAt: %w", err)
	}
	return oldValue.ModifiedAt, nil
}

// ResetModifiedAt resets all changes to the "modified_at" field.
func (m *ManufacturerMutation) ResetModifiedAt() {
	m.modified_at = nil
}

// SetPhonesID sets the "phones" edge to the Manufacturer entity by id.
func (m *ManufacturerMutation) SetPhonesID(id int) {
	m.phones = &id
}

// ClearPhones clears the "phones" edge to the Manufacturer entity.
func (m *ManufacturerMutation) ClearPhones() {
	m.clearedphones = true
}

// PhonesCleared returns if the "phones" edge to the Manufacturer entity was cleared.
func (m *ManufacturerMutation) PhonesCleared() bool {
	return m.clearedphones
}

// PhonesID returns the "phones" edge ID in the mutation.
func (m *ManufacturerMutation) PhonesID() (id int, exists bool) {
	if m.phones != nil {
		return *m.phones, true
	}
	return
}

// PhonesIDs returns the "phones" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PhonesID instead. It exists only for internal usage by the builders.
func (m *ManufacturerMutation) PhonesIDs() (ids []int) {
	if id := m.phones; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPhones resets all changes to the "phones" edge.
func (m *ManufacturerMutation) ResetPhones() {
	m.phones = nil
	m.clearedphones = false
}

// Op returns the operation name.
func (m *ManufacturerMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Manufacturer).
func (m *ManufacturerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ManufacturerMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, manufacturer.FieldName)
	}
	if m.created_at != nil {
		fields = append(fields, manufacturer.FieldCreatedAt)
	}
	if m.modified_at != nil {
		fields = append(fields, manufacturer.FieldModifiedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ManufacturerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case manufacturer.FieldName:
		return m.Name()
	case manufacturer.FieldCreatedAt:
		return m.CreatedAt()
	case manufacturer.FieldModifiedAt:
		return m.ModifiedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ManufacturerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case manufacturer.FieldName:
		return m.OldName(ctx)
	case manufacturer.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case manufacturer.FieldModifiedAt:
		return m.OldModifiedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Manufacturer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ManufacturerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case manufacturer.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case manufacturer.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case manufacturer.FieldModifiedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModifiedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Manufacturer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ManufacturerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ManufacturerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ManufacturerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Manufacturer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ManufacturerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ManufacturerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ManufacturerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Manufacturer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ManufacturerMutation) ResetField(name string) error {
	switch name {
	case manufacturer.FieldName:
		m.ResetName()
		return nil
	case manufacturer.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case manufacturer.FieldModifiedAt:
		m.ResetModifiedAt()
		return nil
	}
	return fmt.Errorf("unknown Manufacturer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ManufacturerMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.phones != nil {
		edges = append(edges, manufacturer.EdgePhones)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ManufacturerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case manufacturer.EdgePhones:
		if id := m.phones; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ManufacturerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ManufacturerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ManufacturerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedphones {
		edges = append(edges, manufacturer.EdgePhones)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ManufacturerMutation) EdgeCleared(name string) bool {
	switch name {
	case manufacturer.EdgePhones:
		return m.clearedphones
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ManufacturerMutation) ClearEdge(name string) error {
	switch name {
	case manufacturer.EdgePhones:
		m.ClearPhones()
		return nil
	}
	return fmt.Errorf("unknown Manufacturer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ManufacturerMutation) ResetEdge(name string) error {
	switch name {
	case manufacturer.EdgePhones:
		m.ResetPhones()
		return nil
	}
	return fmt.Errorf("unknown Manufacturer edge %s", name)
}

// OperatingSystemMutation represents an operation that mutates the OperatingSystem nodes in the graph.
type OperatingSystemMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	created_at    *time.Time
	modified_at   *time.Time
	clearedFields map[string]struct{}
	phones        *int
	clearedphones bool
	done          bool
	oldValue      func(context.Context) (*OperatingSystem, error)
	predicates    []predicate.OperatingSystem
}

var _ ent.Mutation = (*OperatingSystemMutation)(nil)

// operatingsystemOption allows management of the mutation configuration using functional options.
type operatingsystemOption func(*OperatingSystemMutation)

// newOperatingSystemMutation creates new mutation for the OperatingSystem entity.
func newOperatingSystemMutation(c config, op Op, opts ...operatingsystemOption) *OperatingSystemMutation {
	m := &OperatingSystemMutation{
		config:        c,
		op:            op,
		typ:           TypeOperatingSystem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOperatingSystemID sets the ID field of the mutation.
func withOperatingSystemID(id int) operatingsystemOption {
	return func(m *OperatingSystemMutation) {
		var (
			err   error
			once  sync.Once
			value *OperatingSystem
		)
		m.oldValue = func(ctx context.Context) (*OperatingSystem, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OperatingSystem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOperatingSystem sets the old OperatingSystem of the mutation.
func withOperatingSystem(node *OperatingSystem) operatingsystemOption {
	return func(m *OperatingSystemMutation) {
		m.oldValue = func(context.Context) (*OperatingSystem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OperatingSystemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OperatingSystemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *OperatingSystemMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *OperatingSystemMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *OperatingSystemMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the OperatingSystem entity.
// If the OperatingSystem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperatingSystemMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *OperatingSystemMutation) ResetName() {
	m.name = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *OperatingSystemMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OperatingSystemMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the OperatingSystem entity.
// If the OperatingSystem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperatingSystemMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OperatingSystemMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetModifiedAt sets the "modified_at" field.
func (m *OperatingSystemMutation) SetModifiedAt(t time.Time) {
	m.modified_at = &t
}

// ModifiedAt returns the value of the "modified_at" field in the mutation.
func (m *OperatingSystemMutation) ModifiedAt() (r time.Time, exists bool) {
	v := m.modified_at
	if v == nil {
		return
	}
	return *v, true
}

// OldModifiedAt returns the old "modified_at" field's value of the OperatingSystem entity.
// If the OperatingSystem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperatingSystemMutation) OldModifiedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldModifiedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldModifiedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModifiedAt: %w", err)
	}
	return oldValue.ModifiedAt, nil
}

// ResetModifiedAt resets all changes to the "modified_at" field.
func (m *OperatingSystemMutation) ResetModifiedAt() {
	m.modified_at = nil
}

// SetPhonesID sets the "phones" edge to the Manufacturer entity by id.
func (m *OperatingSystemMutation) SetPhonesID(id int) {
	m.phones = &id
}

// ClearPhones clears the "phones" edge to the Manufacturer entity.
func (m *OperatingSystemMutation) ClearPhones() {
	m.clearedphones = true
}

// PhonesCleared returns if the "phones" edge to the Manufacturer entity was cleared.
func (m *OperatingSystemMutation) PhonesCleared() bool {
	return m.clearedphones
}

// PhonesID returns the "phones" edge ID in the mutation.
func (m *OperatingSystemMutation) PhonesID() (id int, exists bool) {
	if m.phones != nil {
		return *m.phones, true
	}
	return
}

// PhonesIDs returns the "phones" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PhonesID instead. It exists only for internal usage by the builders.
func (m *OperatingSystemMutation) PhonesIDs() (ids []int) {
	if id := m.phones; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPhones resets all changes to the "phones" edge.
func (m *OperatingSystemMutation) ResetPhones() {
	m.phones = nil
	m.clearedphones = false
}

// Op returns the operation name.
func (m *OperatingSystemMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (OperatingSystem).
func (m *OperatingSystemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OperatingSystemMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, operatingsystem.FieldName)
	}
	if m.created_at != nil {
		fields = append(fields, operatingsystem.FieldCreatedAt)
	}
	if m.modified_at != nil {
		fields = append(fields, operatingsystem.FieldModifiedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OperatingSystemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case operatingsystem.FieldName:
		return m.Name()
	case operatingsystem.FieldCreatedAt:
		return m.CreatedAt()
	case operatingsystem.FieldModifiedAt:
		return m.ModifiedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OperatingSystemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case operatingsystem.FieldName:
		return m.OldName(ctx)
	case operatingsystem.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case operatingsystem.FieldModifiedAt:
		return m.OldModifiedAt(ctx)
	}
	return nil, fmt.Errorf("unknown OperatingSystem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OperatingSystemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case operatingsystem.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case operatingsystem.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case operatingsystem.FieldModifiedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModifiedAt(v)
		return nil
	}
	return fmt.Errorf("unknown OperatingSystem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OperatingSystemMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OperatingSystemMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OperatingSystemMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown OperatingSystem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OperatingSystemMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OperatingSystemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OperatingSystemMutation) ClearField(name string) error {
	return fmt.Errorf("unknown OperatingSystem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OperatingSystemMutation) ResetField(name string) error {
	switch name {
	case operatingsystem.FieldName:
		m.ResetName()
		return nil
	case operatingsystem.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case operatingsystem.FieldModifiedAt:
		m.ResetModifiedAt()
		return nil
	}
	return fmt.Errorf("unknown OperatingSystem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OperatingSystemMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.phones != nil {
		edges = append(edges, operatingsystem.EdgePhones)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OperatingSystemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case operatingsystem.EdgePhones:
		if id := m.phones; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OperatingSystemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OperatingSystemMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OperatingSystemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedphones {
		edges = append(edges, operatingsystem.EdgePhones)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OperatingSystemMutation) EdgeCleared(name string) bool {
	switch name {
	case operatingsystem.EdgePhones:
		return m.clearedphones
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OperatingSystemMutation) ClearEdge(name string) error {
	switch name {
	case operatingsystem.EdgePhones:
		m.ClearPhones()
		return nil
	}
	return fmt.Errorf("unknown OperatingSystem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OperatingSystemMutation) ResetEdge(name string) error {
	switch name {
	case operatingsystem.EdgePhones:
		m.ResetPhones()
		return nil
	}
	return fmt.Errorf("unknown OperatingSystem edge %s", name)
}

// PhoneMutation represents an operation that mutates the Phone nodes in the graph.
type PhoneMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	name                *string
	created_at          *time.Time
	modified_at         *time.Time
	clearedFields       map[string]struct{}
	manufacturer        *int
	clearedmanufacturer bool
	os                  *int
	clearedos           bool
	done                bool
	oldValue            func(context.Context) (*Phone, error)
	predicates          []predicate.Phone
}

var _ ent.Mutation = (*PhoneMutation)(nil)

// phoneOption allows management of the mutation configuration using functional options.
type phoneOption func(*PhoneMutation)

// newPhoneMutation creates new mutation for the Phone entity.
func newPhoneMutation(c config, op Op, opts ...phoneOption) *PhoneMutation {
	m := &PhoneMutation{
		config:        c,
		op:            op,
		typ:           TypePhone,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPhoneID sets the ID field of the mutation.
func withPhoneID(id int) phoneOption {
	return func(m *PhoneMutation) {
		var (
			err   error
			once  sync.Once
			value *Phone
		)
		m.oldValue = func(ctx context.Context) (*Phone, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Phone.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPhone sets the old Phone of the mutation.
func withPhone(node *Phone) phoneOption {
	return func(m *PhoneMutation) {
		m.oldValue = func(context.Context) (*Phone, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PhoneMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PhoneMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *PhoneMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *PhoneMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PhoneMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Phone entity.
// If the Phone object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PhoneMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PhoneMutation) ResetName() {
	m.name = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *PhoneMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PhoneMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Phone entity.
// If the Phone object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PhoneMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PhoneMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetModifiedAt sets the "modified_at" field.
func (m *PhoneMutation) SetModifiedAt(t time.Time) {
	m.modified_at = &t
}

// ModifiedAt returns the value of the "modified_at" field in the mutation.
func (m *PhoneMutation) ModifiedAt() (r time.Time, exists bool) {
	v := m.modified_at
	if v == nil {
		return
	}
	return *v, true
}

// OldModifiedAt returns the old "modified_at" field's value of the Phone entity.
// If the Phone object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PhoneMutation) OldModifiedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldModifiedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldModifiedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModifiedAt: %w", err)
	}
	return oldValue.ModifiedAt, nil
}

// ResetModifiedAt resets all changes to the "modified_at" field.
func (m *PhoneMutation) ResetModifiedAt() {
	m.modified_at = nil
}

// SetManufacturerID sets the "manufacturer" edge to the Manufacturer entity by id.
func (m *PhoneMutation) SetManufacturerID(id int) {
	m.manufacturer = &id
}

// ClearManufacturer clears the "manufacturer" edge to the Manufacturer entity.
func (m *PhoneMutation) ClearManufacturer() {
	m.clearedmanufacturer = true
}

// ManufacturerCleared returns if the "manufacturer" edge to the Manufacturer entity was cleared.
func (m *PhoneMutation) ManufacturerCleared() bool {
	return m.clearedmanufacturer
}

// ManufacturerID returns the "manufacturer" edge ID in the mutation.
func (m *PhoneMutation) ManufacturerID() (id int, exists bool) {
	if m.manufacturer != nil {
		return *m.manufacturer, true
	}
	return
}

// ManufacturerIDs returns the "manufacturer" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ManufacturerID instead. It exists only for internal usage by the builders.
func (m *PhoneMutation) ManufacturerIDs() (ids []int) {
	if id := m.manufacturer; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetManufacturer resets all changes to the "manufacturer" edge.
func (m *PhoneMutation) ResetManufacturer() {
	m.manufacturer = nil
	m.clearedmanufacturer = false
}

// SetOsID sets the "os" edge to the OperatingSystem entity by id.
func (m *PhoneMutation) SetOsID(id int) {
	m.os = &id
}

// ClearOs clears the "os" edge to the OperatingSystem entity.
func (m *PhoneMutation) ClearOs() {
	m.clearedos = true
}

// OsCleared returns if the "os" edge to the OperatingSystem entity was cleared.
func (m *PhoneMutation) OsCleared() bool {
	return m.clearedos
}

// OsID returns the "os" edge ID in the mutation.
func (m *PhoneMutation) OsID() (id int, exists bool) {
	if m.os != nil {
		return *m.os, true
	}
	return
}

// OsIDs returns the "os" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OsID instead. It exists only for internal usage by the builders.
func (m *PhoneMutation) OsIDs() (ids []int) {
	if id := m.os; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOs resets all changes to the "os" edge.
func (m *PhoneMutation) ResetOs() {
	m.os = nil
	m.clearedos = false
}

// Op returns the operation name.
func (m *PhoneMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Phone).
func (m *PhoneMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PhoneMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, phone.FieldName)
	}
	if m.created_at != nil {
		fields = append(fields, phone.FieldCreatedAt)
	}
	if m.modified_at != nil {
		fields = append(fields, phone.FieldModifiedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PhoneMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case phone.FieldName:
		return m.Name()
	case phone.FieldCreatedAt:
		return m.CreatedAt()
	case phone.FieldModifiedAt:
		return m.ModifiedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PhoneMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case phone.FieldName:
		return m.OldName(ctx)
	case phone.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case phone.FieldModifiedAt:
		return m.OldModifiedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Phone field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PhoneMutation) SetField(name string, value ent.Value) error {
	switch name {
	case phone.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case phone.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case phone.FieldModifiedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModifiedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Phone field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PhoneMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PhoneMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PhoneMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Phone numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PhoneMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PhoneMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PhoneMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Phone nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PhoneMutation) ResetField(name string) error {
	switch name {
	case phone.FieldName:
		m.ResetName()
		return nil
	case phone.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case phone.FieldModifiedAt:
		m.ResetModifiedAt()
		return nil
	}
	return fmt.Errorf("unknown Phone field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PhoneMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.manufacturer != nil {
		edges = append(edges, phone.EdgeManufacturer)
	}
	if m.os != nil {
		edges = append(edges, phone.EdgeOs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PhoneMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case phone.EdgeManufacturer:
		if id := m.manufacturer; id != nil {
			return []ent.Value{*id}
		}
	case phone.EdgeOs:
		if id := m.os; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PhoneMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PhoneMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PhoneMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedmanufacturer {
		edges = append(edges, phone.EdgeManufacturer)
	}
	if m.clearedos {
		edges = append(edges, phone.EdgeOs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PhoneMutation) EdgeCleared(name string) bool {
	switch name {
	case phone.EdgeManufacturer:
		return m.clearedmanufacturer
	case phone.EdgeOs:
		return m.clearedos
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PhoneMutation) ClearEdge(name string) error {
	switch name {
	case phone.EdgeManufacturer:
		m.ClearManufacturer()
		return nil
	case phone.EdgeOs:
		m.ClearOs()
		return nil
	}
	return fmt.Errorf("unknown Phone unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PhoneMutation) ResetEdge(name string) error {
	switch name {
	case phone.EdgeManufacturer:
		m.ResetManufacturer()
		return nil
	case phone.EdgeOs:
		m.ResetOs()
		return nil
	}
	return fmt.Errorf("unknown Phone edge %s", name)
}
