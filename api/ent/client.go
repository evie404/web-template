// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/rickypai/web-template/api/ent/migrate"

	"github.com/rickypai/web-template/api/ent/manufacturer"
	"github.com/rickypai/web-template/api/ent/os"
	"github.com/rickypai/web-template/api/ent/phone"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Manufacturer is the client for interacting with the Manufacturer builders.
	Manufacturer *ManufacturerClient
	// OS is the client for interacting with the OS builders.
	OS *OSClient
	// Phone is the client for interacting with the Phone builders.
	Phone *PhoneClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Manufacturer = NewManufacturerClient(c.config)
	c.OS = NewOSClient(c.config)
	c.Phone = NewPhoneClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Manufacturer: NewManufacturerClient(cfg),
		OS:           NewOSClient(cfg),
		Phone:        NewPhoneClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:       cfg,
		Manufacturer: NewManufacturerClient(cfg),
		OS:           NewOSClient(cfg),
		Phone:        NewPhoneClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Manufacturer.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Manufacturer.Use(hooks...)
	c.OS.Use(hooks...)
	c.Phone.Use(hooks...)
}

// ManufacturerClient is a client for the Manufacturer schema.
type ManufacturerClient struct {
	config
}

// NewManufacturerClient returns a client for the Manufacturer from the given config.
func NewManufacturerClient(c config) *ManufacturerClient {
	return &ManufacturerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `manufacturer.Hooks(f(g(h())))`.
func (c *ManufacturerClient) Use(hooks ...Hook) {
	c.hooks.Manufacturer = append(c.hooks.Manufacturer, hooks...)
}

// Create returns a create builder for Manufacturer.
func (c *ManufacturerClient) Create() *ManufacturerCreate {
	mutation := newManufacturerMutation(c.config, OpCreate)
	return &ManufacturerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Manufacturer entities.
func (c *ManufacturerClient) CreateBulk(builders ...*ManufacturerCreate) *ManufacturerCreateBulk {
	return &ManufacturerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Manufacturer.
func (c *ManufacturerClient) Update() *ManufacturerUpdate {
	mutation := newManufacturerMutation(c.config, OpUpdate)
	return &ManufacturerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ManufacturerClient) UpdateOne(m *Manufacturer) *ManufacturerUpdateOne {
	mutation := newManufacturerMutation(c.config, OpUpdateOne, withManufacturer(m))
	return &ManufacturerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ManufacturerClient) UpdateOneID(id int) *ManufacturerUpdateOne {
	mutation := newManufacturerMutation(c.config, OpUpdateOne, withManufacturerID(id))
	return &ManufacturerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Manufacturer.
func (c *ManufacturerClient) Delete() *ManufacturerDelete {
	mutation := newManufacturerMutation(c.config, OpDelete)
	return &ManufacturerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ManufacturerClient) DeleteOne(m *Manufacturer) *ManufacturerDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ManufacturerClient) DeleteOneID(id int) *ManufacturerDeleteOne {
	builder := c.Delete().Where(manufacturer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ManufacturerDeleteOne{builder}
}

// Query returns a query builder for Manufacturer.
func (c *ManufacturerClient) Query() *ManufacturerQuery {
	return &ManufacturerQuery{config: c.config}
}

// Get returns a Manufacturer entity by its id.
func (c *ManufacturerClient) Get(ctx context.Context, id int) (*Manufacturer, error) {
	return c.Query().Where(manufacturer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ManufacturerClient) GetX(ctx context.Context, id int) *Manufacturer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPhones queries the phones edge of a Manufacturer.
func (c *ManufacturerClient) QueryPhones(m *Manufacturer) *ManufacturerQuery {
	query := &ManufacturerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(manufacturer.Table, manufacturer.FieldID, id),
			sqlgraph.To(manufacturer.Table, manufacturer.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, manufacturer.PhonesTable, manufacturer.PhonesColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ManufacturerClient) Hooks() []Hook {
	return c.hooks.Manufacturer
}

// OSClient is a client for the OS schema.
type OSClient struct {
	config
}

// NewOSClient returns a client for the OS from the given config.
func NewOSClient(c config) *OSClient {
	return &OSClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `os.Hooks(f(g(h())))`.
func (c *OSClient) Use(hooks ...Hook) {
	c.hooks.OS = append(c.hooks.OS, hooks...)
}

// Create returns a create builder for OS.
func (c *OSClient) Create() *OSCreate {
	mutation := newOSMutation(c.config, OpCreate)
	return &OSCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OS entities.
func (c *OSClient) CreateBulk(builders ...*OSCreate) *OSCreateBulk {
	return &OSCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OS.
func (c *OSClient) Update() *OSUpdate {
	mutation := newOSMutation(c.config, OpUpdate)
	return &OSUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OSClient) UpdateOne(o *OS) *OSUpdateOne {
	mutation := newOSMutation(c.config, OpUpdateOne, withOS(o))
	return &OSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OSClient) UpdateOneID(id int) *OSUpdateOne {
	mutation := newOSMutation(c.config, OpUpdateOne, withOSID(id))
	return &OSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OS.
func (c *OSClient) Delete() *OSDelete {
	mutation := newOSMutation(c.config, OpDelete)
	return &OSDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OSClient) DeleteOne(o *OS) *OSDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OSClient) DeleteOneID(id int) *OSDeleteOne {
	builder := c.Delete().Where(os.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OSDeleteOne{builder}
}

// Query returns a query builder for OS.
func (c *OSClient) Query() *OSQuery {
	return &OSQuery{config: c.config}
}

// Get returns a OS entity by its id.
func (c *OSClient) Get(ctx context.Context, id int) (*OS, error) {
	return c.Query().Where(os.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OSClient) GetX(ctx context.Context, id int) *OS {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPhones queries the phones edge of a OS.
func (c *OSClient) QueryPhones(o *OS) *ManufacturerQuery {
	query := &ManufacturerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(os.Table, os.FieldID, id),
			sqlgraph.To(manufacturer.Table, manufacturer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, os.PhonesTable, os.PhonesColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OSClient) Hooks() []Hook {
	return c.hooks.OS
}

// PhoneClient is a client for the Phone schema.
type PhoneClient struct {
	config
}

// NewPhoneClient returns a client for the Phone from the given config.
func NewPhoneClient(c config) *PhoneClient {
	return &PhoneClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `phone.Hooks(f(g(h())))`.
func (c *PhoneClient) Use(hooks ...Hook) {
	c.hooks.Phone = append(c.hooks.Phone, hooks...)
}

// Create returns a create builder for Phone.
func (c *PhoneClient) Create() *PhoneCreate {
	mutation := newPhoneMutation(c.config, OpCreate)
	return &PhoneCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Phone entities.
func (c *PhoneClient) CreateBulk(builders ...*PhoneCreate) *PhoneCreateBulk {
	return &PhoneCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Phone.
func (c *PhoneClient) Update() *PhoneUpdate {
	mutation := newPhoneMutation(c.config, OpUpdate)
	return &PhoneUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PhoneClient) UpdateOne(ph *Phone) *PhoneUpdateOne {
	mutation := newPhoneMutation(c.config, OpUpdateOne, withPhone(ph))
	return &PhoneUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PhoneClient) UpdateOneID(id int) *PhoneUpdateOne {
	mutation := newPhoneMutation(c.config, OpUpdateOne, withPhoneID(id))
	return &PhoneUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Phone.
func (c *PhoneClient) Delete() *PhoneDelete {
	mutation := newPhoneMutation(c.config, OpDelete)
	return &PhoneDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PhoneClient) DeleteOne(ph *Phone) *PhoneDeleteOne {
	return c.DeleteOneID(ph.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PhoneClient) DeleteOneID(id int) *PhoneDeleteOne {
	builder := c.Delete().Where(phone.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PhoneDeleteOne{builder}
}

// Query returns a query builder for Phone.
func (c *PhoneClient) Query() *PhoneQuery {
	return &PhoneQuery{config: c.config}
}

// Get returns a Phone entity by its id.
func (c *PhoneClient) Get(ctx context.Context, id int) (*Phone, error) {
	return c.Query().Where(phone.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PhoneClient) GetX(ctx context.Context, id int) *Phone {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryManufacturer queries the manufacturer edge of a Phone.
func (c *PhoneClient) QueryManufacturer(ph *Phone) *ManufacturerQuery {
	query := &ManufacturerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(phone.Table, phone.FieldID, id),
			sqlgraph.To(manufacturer.Table, manufacturer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, phone.ManufacturerTable, phone.ManufacturerColumn),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOs queries the os edge of a Phone.
func (c *PhoneClient) QueryOs(ph *Phone) *OSQuery {
	query := &OSQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(phone.Table, phone.FieldID, id),
			sqlgraph.To(os.Table, os.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, phone.OsTable, phone.OsColumn),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PhoneClient) Hooks() []Hook {
	return c.hooks.Phone
}
