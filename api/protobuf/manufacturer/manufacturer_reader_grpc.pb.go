// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package manufacturer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManufacturerReaderClient is the client API for ManufacturerReader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManufacturerReaderClient interface {
	GetOneByID(ctx context.Context, in *GetOneByIDRequest, opts ...grpc.CallOption) (*GetOneByIDResponse, error)
	GetManyByIDs(ctx context.Context, in *GetManyByIDsRequest, opts ...grpc.CallOption) (*GetManyByIDsResponse, error)
	ListByCursor(ctx context.Context, in *ListByCursorRequest, opts ...grpc.CallOption) (*ListByCursorResponse, error)
	ListByPage(ctx context.Context, in *ListByPageRequest, opts ...grpc.CallOption) (*ListByPageResponse, error)
	ListByPrefix(ctx context.Context, in *ListByPrefixRequest, opts ...grpc.CallOption) (*ListByPrefixResponse, error)
}

type manufacturerReaderClient struct {
	cc grpc.ClientConnInterface
}

func NewManufacturerReaderClient(cc grpc.ClientConnInterface) ManufacturerReaderClient {
	return &manufacturerReaderClient{cc}
}

func (c *manufacturerReaderClient) GetOneByID(ctx context.Context, in *GetOneByIDRequest, opts ...grpc.CallOption) (*GetOneByIDResponse, error) {
	out := new(GetOneByIDResponse)
	err := c.cc.Invoke(ctx, "/manufacturer.ManufacturerReader/GetOneByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manufacturerReaderClient) GetManyByIDs(ctx context.Context, in *GetManyByIDsRequest, opts ...grpc.CallOption) (*GetManyByIDsResponse, error) {
	out := new(GetManyByIDsResponse)
	err := c.cc.Invoke(ctx, "/manufacturer.ManufacturerReader/GetManyByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manufacturerReaderClient) ListByCursor(ctx context.Context, in *ListByCursorRequest, opts ...grpc.CallOption) (*ListByCursorResponse, error) {
	out := new(ListByCursorResponse)
	err := c.cc.Invoke(ctx, "/manufacturer.ManufacturerReader/ListByCursor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manufacturerReaderClient) ListByPage(ctx context.Context, in *ListByPageRequest, opts ...grpc.CallOption) (*ListByPageResponse, error) {
	out := new(ListByPageResponse)
	err := c.cc.Invoke(ctx, "/manufacturer.ManufacturerReader/ListByPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manufacturerReaderClient) ListByPrefix(ctx context.Context, in *ListByPrefixRequest, opts ...grpc.CallOption) (*ListByPrefixResponse, error) {
	out := new(ListByPrefixResponse)
	err := c.cc.Invoke(ctx, "/manufacturer.ManufacturerReader/ListByPrefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManufacturerReaderServer is the server API for ManufacturerReader service.
// All implementations must embed UnimplementedManufacturerReaderServer
// for forward compatibility
type ManufacturerReaderServer interface {
	GetOneByID(context.Context, *GetOneByIDRequest) (*GetOneByIDResponse, error)
	GetManyByIDs(context.Context, *GetManyByIDsRequest) (*GetManyByIDsResponse, error)
	ListByCursor(context.Context, *ListByCursorRequest) (*ListByCursorResponse, error)
	ListByPage(context.Context, *ListByPageRequest) (*ListByPageResponse, error)
	ListByPrefix(context.Context, *ListByPrefixRequest) (*ListByPrefixResponse, error)
	mustEmbedUnimplementedManufacturerReaderServer()
}

// UnimplementedManufacturerReaderServer must be embedded to have forward compatible implementations.
type UnimplementedManufacturerReaderServer struct {
}

func (UnimplementedManufacturerReaderServer) GetOneByID(context.Context, *GetOneByIDRequest) (*GetOneByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneByID not implemented")
}
func (UnimplementedManufacturerReaderServer) GetManyByIDs(context.Context, *GetManyByIDsRequest) (*GetManyByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManyByIDs not implemented")
}
func (UnimplementedManufacturerReaderServer) ListByCursor(context.Context, *ListByCursorRequest) (*ListByCursorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByCursor not implemented")
}
func (UnimplementedManufacturerReaderServer) ListByPage(context.Context, *ListByPageRequest) (*ListByPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByPage not implemented")
}
func (UnimplementedManufacturerReaderServer) ListByPrefix(context.Context, *ListByPrefixRequest) (*ListByPrefixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByPrefix not implemented")
}
func (UnimplementedManufacturerReaderServer) mustEmbedUnimplementedManufacturerReaderServer() {}

// UnsafeManufacturerReaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManufacturerReaderServer will
// result in compilation errors.
type UnsafeManufacturerReaderServer interface {
	mustEmbedUnimplementedManufacturerReaderServer()
}

func RegisterManufacturerReaderServer(s grpc.ServiceRegistrar, srv ManufacturerReaderServer) {
	s.RegisterService(&ManufacturerReader_ServiceDesc, srv)
}

func _ManufacturerReader_GetOneByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManufacturerReaderServer).GetOneByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manufacturer.ManufacturerReader/GetOneByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManufacturerReaderServer).GetOneByID(ctx, req.(*GetOneByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManufacturerReader_GetManyByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManyByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManufacturerReaderServer).GetManyByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manufacturer.ManufacturerReader/GetManyByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManufacturerReaderServer).GetManyByIDs(ctx, req.(*GetManyByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManufacturerReader_ListByCursor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListByCursorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManufacturerReaderServer).ListByCursor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manufacturer.ManufacturerReader/ListByCursor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManufacturerReaderServer).ListByCursor(ctx, req.(*ListByCursorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManufacturerReader_ListByPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListByPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManufacturerReaderServer).ListByPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manufacturer.ManufacturerReader/ListByPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManufacturerReaderServer).ListByPage(ctx, req.(*ListByPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManufacturerReader_ListByPrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListByPrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManufacturerReaderServer).ListByPrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manufacturer.ManufacturerReader/ListByPrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManufacturerReaderServer).ListByPrefix(ctx, req.(*ListByPrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManufacturerReader_ServiceDesc is the grpc.ServiceDesc for ManufacturerReader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManufacturerReader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manufacturer.ManufacturerReader",
	HandlerType: (*ManufacturerReaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOneByID",
			Handler:    _ManufacturerReader_GetOneByID_Handler,
		},
		{
			MethodName: "GetManyByIDs",
			Handler:    _ManufacturerReader_GetManyByIDs_Handler,
		},
		{
			MethodName: "ListByCursor",
			Handler:    _ManufacturerReader_ListByCursor_Handler,
		},
		{
			MethodName: "ListByPage",
			Handler:    _ManufacturerReader_ListByPage_Handler,
		},
		{
			MethodName: "ListByPrefix",
			Handler:    _ManufacturerReader_ListByPrefix_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/manufacturer/manufacturer_reader.proto",
}
