// Code generated by sqlc. DO NOT EDIT.
// source: phone.sql

package phone

import (
	"context"
)

const getByID = `-- name: GetByID :one
SELECT id, name, make_id, os_id, created_at, modified_at FROM phone WHERE id = $1 LIMIT 1
`

func (q *Queries) GetByID(ctx context.Context, id int64) (Phone, error) {
	row := q.db.QueryRowContext(ctx, getByID, id)
	var i Phone
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MakeID,
		&i.OsID,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const listPhones = `-- name: ListPhones :many
SELECT id, name, make_id, os_id, created_at, modified_at FROM phone
`

func (q *Queries) ListPhones(ctx context.Context) ([]Phone, error) {
	rows, err := q.db.QueryContext(ctx, listPhones)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Phone
	for rows.Next() {
		var i Phone
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.MakeID,
			&i.OsID,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
