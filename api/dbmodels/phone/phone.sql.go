// Code generated by sqlc. DO NOT EDIT.
// source: phone.sql

package phone

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const countTotal = `-- name: CountTotal :one
SELECT COUNT(id) FROM phone
`

func (q *Queries) CountTotal(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTotal)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createOne = `-- name: CreateOne :one
INSERT INTO phone(name, make_id, os_id, created_at, modified_at) VALUES($1, $2, $3, $4, $5) RETURNING id, name, make_id, os_id, created_at, modified_at
`

type CreateOneParams struct {
	Name       string
	MakeID     int32
	OsID       int32
	CreatedAt  time.Time
	ModifiedAt time.Time
}

func (q *Queries) CreateOne(ctx context.Context, arg CreateOneParams) (Phone, error) {
	row := q.db.QueryRowContext(ctx, createOne,
		arg.Name,
		arg.MakeID,
		arg.OsID,
		arg.CreatedAt,
		arg.ModifiedAt,
	)
	var i Phone
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MakeID,
		&i.OsID,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getByID = `-- name: GetByID :one
SELECT id, name, make_id, os_id, created_at, modified_at FROM phone WHERE id = $1 LIMIT 1
`

func (q *Queries) GetByID(ctx context.Context, id int64) (Phone, error) {
	row := q.db.QueryRowContext(ctx, getByID, id)
	var i Phone
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MakeID,
		&i.OsID,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getManyByIDs = `-- name: GetManyByIDs :many
SELECT id, name, make_id, os_id, created_at, modified_at FROM phone WHERE id = ANY($1::bigint[])
`

func (q *Queries) GetManyByIDs(ctx context.Context, dollar_1 []int64) ([]Phone, error) {
	rows, err := q.db.QueryContext(ctx, getManyByIDs, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Phone
	for rows.Next() {
		var i Phone
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.MakeID,
			&i.OsID,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listByPattern = `-- name: ListByPattern :many
SELECT id, name, make_id, os_id, created_at, modified_at FROM phone WHERE name LIKE $1 ORDER BY name ASC LIMIT $2
`

type ListByPatternParams struct {
	Name  string
	Limit int32
}

func (q *Queries) ListByPattern(ctx context.Context, arg ListByPatternParams) ([]Phone, error) {
	rows, err := q.db.QueryContext(ctx, listByPattern, arg.Name, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Phone
	for rows.Next() {
		var i Phone
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.MakeID,
			&i.OsID,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOffset = `-- name: ListOffset :many
SELECT id, name, make_id, os_id, created_at, modified_at FROM phone LIMIT $1 OFFSET $2
`

type ListOffsetParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListOffset(ctx context.Context, arg ListOffsetParams) ([]Phone, error) {
	rows, err := q.db.QueryContext(ctx, listOffset, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Phone
	for rows.Next() {
		var i Phone
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.MakeID,
			&i.OsID,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
